{"mappings":"6cAAA,IAAAA,EAAAC,EAAA,S,2FAoCe,SAAAC,GApCfC,MAoCoCA,IAClC,MAAMC,EAAQC,EAAAC,OAAgB,OACvBC,EAAWC,GAAgBH,EAAAI,SAE/B,MAmBH,OAjBAJ,EAAAK,WAAU,MACP,iBACC,MAAMC,EAAQC,EAAAC,aAAaV,GACrBW,EAAOC,OAAOD,KAAKH,EAAM,IAEzBK,EAAYD,OAAOE,YAAYH,EAAKI,KAAKC,GAAM,CAACA,EAAG,IAAIC,MAAMT,EAAMU,YAEzE,IAAK,MAAMC,KAAOR,EAChB,IAAK,IAAIS,EAAI,EAAGA,EAAIZ,EAAMU,OAAQE,IAChCP,EAAUM,GAAKC,GAAKZ,EAAMY,GAAGD,GAIjCd,EAAaQ,GAZd,KAcA,CAACb,IAEAI,EAEAP,EAAAwB,KAAC,MAAG,C,UACFxB,EAAAyB,IAAC,KAAE,C,SAAC,oBAEJzB,EAAAyB,IAACC,EAAAC,GAAO,CACNC,IAAKxB,EACLyB,QAASC,EACTC,OAAQ,CACNC,UAAU,EACVC,UAAW,CAAEC,MAAO,sBACpBC,MAAO,CACLC,KAAM,eACNH,UAAW,CAAEC,MAAO,uBAEtBG,QAAS,CACPC,QAAS,CACPC,SAAU,CAAEC,WAAY,QACxBC,YAAa,KAGjBC,QAAS,CAAEC,QAAS,QACpBJ,SAAU,CAAC,CAAEK,KAAM,UAAY,CAAEA,KAAM,WACvCC,OAAQ,CACNZ,UAAW,CAAEC,MAAO,sBACpBY,KAAM/B,OAAOD,KAAKP,GAAWwC,QAAQ5B,GAAY,SAANA,KAE7C6B,MAAO,CAAEJ,KAAM,WAAYE,KAAMvC,EAAU0C,MAC3CC,MAAO,CAAEN,KAAM,SACfO,OAAQpC,OAAOqC,QAAQ7C,GACpBwC,QAAO,EAAE5B,KAAa,SAANA,IAChBD,KAAI,EAAEC,EAAGkC,MAAQ,CAAEC,KAAMnC,EAAGyB,KAAM,OAAQE,KAAMO,YAOtDrD,EAAAyB,IAAC,MAAG,C,SAAC,eA7EdK,EAAQyB,IAAI,CACVC,EAAAC,UACAD,EAAAE,WACAC,EAAAC,cACAD,EAAAE,iBACAF,EAAAG,gBACAH,EAAAI,iBACAJ,EAAAK,eACAC,EAAAC,eACAP,EAAAQ,kBACAR,EAAAS,wBACAT,EAAAU,wBACAV,EAAAW","sources":["src/Routes/KlippyLog/TempGraph.tsx"],"sourcesContent":["import { LineChart, LinesChart } from \"echarts/charts\";\r\nimport {\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  DataZoomInsideComponent,\r\n  DataZoomSliderComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  ToolboxComponent,\r\n  TooltipComponent,\r\n} from \"echarts/components\";\r\nimport * as echarts from \"echarts/core\";\r\nimport { CanvasRenderer } from \"echarts/renderers\";\r\nimport ECharts from \"echarts-for-react/lib/core\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\nimport { Stats } from \"../../types\";\r\nimport { statsToTemps } from \"../../utils\";\r\n\r\necharts.use([\r\n  LineChart,\r\n  LinesChart,\r\n  GridComponent,\r\n  DatasetComponent,\r\n  LegendComponent,\r\n  TooltipComponent,\r\n  TitleComponent,\r\n  CanvasRenderer,\r\n  DataZoomComponent,\r\n  DataZoomInsideComponent,\r\n  DataZoomSliderComponent,\r\n  ToolboxComponent,\r\n]);\r\ntype Props = { stats: Stats[]; left?: number; right?: number };\r\n\r\nexport default function TempGraph({ stats }: Props) {\r\n  const chart = useRef<ECharts>(null);\r\n  const [chartData, setChartData] = useState<null | {\r\n    [key: string]: number[];\r\n  }>(null);\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      const temps = statsToTemps(stats);\r\n      const keys = Object.keys(temps[0]);\r\n\r\n      const chartData = Object.fromEntries(keys.map((k) => [k, new Array(temps.length)]));\r\n\r\n      for (const key of keys) {\r\n        for (let i = 0; i < temps.length; i++) {\r\n          chartData[key][i] = temps[i][key];\r\n        }\r\n      }\r\n\r\n      setChartData(chartData);\r\n    })();\r\n  }, [stats]);\r\n\r\n  if (chartData) {\r\n    return (\r\n      <div>\r\n        <h4>Temps over time</h4>\r\n\r\n        <ECharts\r\n          ref={chart}\r\n          echarts={echarts}\r\n          option={{\r\n            darkMode: true,\r\n            textStyle: { color: \"rgb(229, 231, 235)\" },\r\n            title: {\r\n              text: \"Temperatures\",\r\n              textStyle: { color: \"rgb(229, 231, 235)\" },\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: { yAxisIndex: \"none\" },\r\n                saveAsImage: {},\r\n              },\r\n            },\r\n            tooltip: { trigger: \"axis\" },\r\n            dataZoom: [{ type: \"slider\" }, { type: \"inside\" }],\r\n            legend: {\r\n              textStyle: { color: \"rgb(229, 231, 235)\" },\r\n              data: Object.keys(chartData).filter((k) => k !== \"time\"),\r\n            },\r\n            xAxis: { type: \"category\", data: chartData.time },\r\n            yAxis: { type: \"value\" },\r\n            series: Object.entries(chartData)\r\n              .filter(([k]) => k !== \"time\")\r\n              .map(([k, v]) => ({ name: k, type: \"line\", data: v })),\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>Loading...</div>;\r\n}\r\n"],"names":["$bbzbN","parcelRequire","$0644d0f8d7d9b6b0$export$2e2bcd8739ae039","stats","chart","$7fPBF","useRef","chartData1","setChartData","useState","useEffect","temps","$3qM3Y","statsToTemps","keys","Object","chartData","fromEntries","map","k","Array","length","key","i","jsxs","jsx","$parcel$interopDefault","$7jVw0","ref","echarts","$fRnim","option","darkMode","textStyle","color","title","text","toolbox","feature","dataZoom","yAxisIndex","saveAsImage","tooltip","trigger","type","legend","data","filter","xAxis","time","yAxis","series","entries","v","name","use","$5PdaA","LineChart","LinesChart","$lFsj8","GridComponent","DatasetComponent","LegendComponent","TooltipComponent","TitleComponent","$3aDr8","CanvasRenderer","DataZoomComponent","DataZoomInsideComponent","DataZoomSliderComponent","ToolboxComponent"],"version":3,"file":"TempGraph.c6ded3d2.js.map"}