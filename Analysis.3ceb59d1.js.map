{"mappings":"wdAAA,IAAAA,EAAAC,EAAA,S,0BASe,SAAAC,GATfC,UASmCA,IACjC,OACEH,EAAAI,KAAC,MAAG,CAACC,UAAWC,EAAAC,EAAA,G,UACdP,EAAAQ,IAAC,KAAE,C,SAAC,qBACHL,EAAUM,MAAMC,OAAOC,iBAAiB,iBACzCX,EAAAQ,IAAC,KAAE,C,SAAC,yBACHI,KAAKC,UAAUC,EAAAC,mCAAmCZ,W,2GCfzD,IAAAa,EAAAf,EAAA,SAwBO,SAASgB,EAAmCC,GACjD,MACMC,EAvBR,SAAkCC,GAChC,MAAMD,EAAoB,GAE1B,IAAIE,EAAwB,GAC5B,IAAK,MAAMC,KAASF,EAAU,CAC5BC,EAAeA,EAAaE,MAAM,EAAG,GAAGC,OAAOF,GAC/C,MAAMG,EAAiB,GAEvBJ,EAAaK,SAASC,GACpBC,OAAOC,QAAQF,GAAOD,SAAQ,EAAEI,EAAKC,MACnCN,EAAQK,IAAQL,EAAQK,IAAQ,GAAKC,OAIzCZ,EAASa,KACPJ,OAAOK,YAAYL,OAAOC,QAAQJ,GAASS,KAAI,EAAEJ,EAAKC,KAAW,CAACD,EAAKC,EAAQV,EAAaX,YAIhG,OAAOS,EAIUgB,CADAnB,EAAAoB,aAAalB,EAAIT,QAG5B4B,EAAY,GAClB,IAAIC,EAAcnB,EAAS,GAC3B,IAAK,MAAMM,KAAWN,EAASI,MAAM,GAAI,CACvC,IAAK,MAAOO,EAAKC,KAAUH,OAAOC,QAAQJ,GACpCa,EAAYR,GAAO,GAAKC,EAA2B,IAAnBO,EAAYR,IAC9CO,EAAUL,KAAK,CACbO,KAAMd,EAAQc,KACdC,KAAMV,EACNW,gBAAiBH,EAAYR,G,MAC7BC,IAINO,EAAcb,EAGhB,OAAOY","sources":["src/Routes/KlippyLog/Analysis.tsx","src/utils/analysis.ts"],"sourcesContent":["import cx from \"ts-classnames\";\r\n\r\nimport { KlippyLog } from \"../../types\";\r\nimport { searchForAbnormalTemperatureSpikes } from \"../../utils/analysis\";\r\n\r\ninterface Props {\r\n  klippyLog: KlippyLog;\r\n}\r\n\r\nexport default function Analysis({ klippyLog }: Props) {\r\n  return (\r\n    <div className={cx()}>\r\n      <h2>General Analysis</h2>\r\n      {klippyLog.stats.length.toLocaleString()} stats entries\r\n      <h2>Temperature Analysis</h2>\r\n      {JSON.stringify(searchForAbnormalTemperatureSpikes(klippyLog))}\r\n    </div>\r\n  );\r\n}\r\n","import { KlippyLog, Temps } from \"../types\";\r\nimport { statsToTemps } from \".\";\r\n\r\nfunction calculateRunningAverages(allTemps: Temps[]) {\r\n  const averages: Temps[] = [];\r\n\r\n  let runningTemps: Temps[] = [];\r\n  for (const temps of allTemps) {\r\n    runningTemps = runningTemps.slice(1, 5).concat(temps);\r\n    const average: Temps = {};\r\n\r\n    runningTemps.forEach((temps) =>\r\n      Object.entries(temps).forEach(([key, value]) => {\r\n        average[key] = (average[key] || 0) + value;\r\n      })\r\n    );\r\n\r\n    averages.push(\r\n      Object.fromEntries(Object.entries(average).map(([key, value]) => [key, value / runningTemps.length]))\r\n    );\r\n  }\r\n\r\n  return averages;\r\n}\r\nexport function searchForAbnormalTemperatureSpikes(log: KlippyLog) {\r\n  const allTemps = statsToTemps(log.stats);\r\n  const averages = calculateRunningAverages(allTemps);\r\n\r\n  const anomalies = [];\r\n  let lastAverage = averages[0];\r\n  for (const average of averages.slice(1)) {\r\n    for (const [key, value] of Object.entries(average)) {\r\n      if (lastAverage[key] > 0 && value > lastAverage[key] * 1.2) {\r\n        anomalies.push({\r\n          time: average.time,\r\n          name: key,\r\n          previousAverage: lastAverage[key],\r\n          value,\r\n        });\r\n      }\r\n    }\r\n    lastAverage = average;\r\n  }\r\n\r\n  return anomalies;\r\n}\r\n"],"names":["$bbzbN","parcelRequire","$e39727cb0c3be884$export$2e2bcd8739ae039","klippyLog","jsxs","className","$parcel$interopDefault","$UBbba","jsx","stats","length","toLocaleString","JSON","stringify","$6WDN4","searchForAbnormalTemperatureSpikes","$3qM3Y","$f5315f4adf8f2d79$export$948a1c9e364f20e5","log","averages","allTemps","runningTemps","temps1","slice","concat","average","forEach","temps","Object","entries","key","value","push","fromEntries","map","$f5315f4adf8f2d79$var$calculateRunningAverages","statsToTemps","anomalies","lastAverage","time","name","previousAverage"],"version":3,"file":"Analysis.3ceb59d1.js.map"}