{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,0BASe,SAAAC,EAAkBC,G,IAAAC,EAAAD,EAAEC,UACjC,OACEJ,EAAAK,KAAC,MAAG,CAACC,UAAWC,EAAAC,EAAA,G,UACdR,EAAAS,IAAC,KAAE,C,SAAC,qBACHL,EAAUM,MAAMC,OAAOC,iBAAiB,iBACzCZ,EAAAS,IAAC,KAAE,C,SAAC,yBACHI,KAAKC,UAAUC,EAAAC,mCAAmCZ,W,2GCfzD,IAAAa,EAAAhB,EAAA,S,aA2BO,SAASiB,EAAmCC,GACjD,IACMC,EA1BR,SAAkCC,GAChC,IAAMD,EAAoB,GAEtBE,EAAwB,GACvBC,GAAW,EAAXC,GAAW,EAAXC,OAAWC,E,IAAhB,I,IAAKC,E,gBAAA,IAAMC,EAAND,EAAWE,MACdP,EAAeA,EAAaQ,MAAM,EAAG,GAAGC,OAAOH,GAC/C,IAAMI,EAAiB,CAAEC,KAAML,EAAMK,KAAMC,MAAO,IAElDZ,EAAaa,SAAQ,SAACD,G,OACpBE,OAAOC,QAAQH,EAAMA,OAAOC,SAAQ,SAAAhC,G,2BAAEmC,EAAGC,EAAA,GAAEV,EAAKU,EAAA,GAC9CP,EAAQE,MAAMI,IAAQN,EAAQE,MAAMI,IAAQ,GAAKT,QAIrDT,EAASoB,KAAK,CACZP,KAAMD,EAAQC,KACdC,MAAOE,OAAOK,YACZL,OAAOC,QAAQL,EAAQE,OAAOQ,KAAI,SAAAvC,G,iCAAkB,CAAboC,EAAA,GAAOA,EAAA,GAAoBjB,EAAaX,eAbhFgC,EAAetB,EAAQuB,OAAAC,cAAvBtB,GAAAI,EAAAgB,EAAWG,QAAAC,MAAXxB,GAAW,EAAAyB,EAAAL,EAAAhB,G,SAAXH,GAAW,EAAXC,EAAWwB,E,YAAX1B,GAAW,MAAXoB,EAAWO,QAAXP,EAAWO,S,WAAX1B,E,MAAAC,GAkBL,OAAOL,EAIU+B,CADAC,EAAAC,aAAalC,EAAIT,QAG5B4C,EAAY,GACdC,EAAcnC,EAAS,GACtBG,GAAa,EAAbC,GAAa,EAAbC,OAAaC,E,IAAlB,QAAKC,EAAAgB,EAAiBvB,EAASU,MAAM,GAAEc,OAAAC,cAAlCtB,GAAAI,EAAAgB,EAAaG,QAAAC,MAAbxB,GAAa,EAAuB,CAApC,IAAMS,EAANL,EAAaE,MACX2B,GAAkB,EAAlBC,GAAkB,EAAlBC,OAAkBhC,E,IAAvB,QAAKiC,EAAAC,EAAsBxB,OAAOC,QAAQL,GAAQY,OAAAC,cAA7CW,GAAAG,EAAAC,EAAkBd,QAAAC,MAAlBS,GAAkB,GAAlB,IAAAK,EAAA5C,EAAA6C,cAAAH,EAAkB9B,MAAA,GAAXS,EAAGuB,EAAA,GAAEhC,EAAKgC,EAAA,GAChBN,EAAYrB,MAAMI,GAAO,GAAKT,EAAiC,IAAzB0B,EAAYrB,MAAMI,IAC1DgB,EAAUd,KAAK,CACbP,KAAMD,EAAQC,KACd8B,KAAMzB,EACN0B,gBAAiBT,EAAYrB,MAAMI,GACnCT,W,SAND4B,GAAkB,EAAlBC,EAAkBT,E,YAAlBO,GAAkB,MAAlBI,EAAkBV,QAAlBU,EAAkBV,S,WAAlBO,E,MAAAC,GAULH,EAAcvB,G,SAXXR,GAAa,EAAbC,EAAawB,E,YAAb1B,GAAa,MAAboB,EAAaO,QAAbP,EAAaO,S,WAAb1B,E,MAAAC,GAcL,OAAO6B,M","sources":["src/Routes/KlippyLog/Analysis.tsx","src/utils/analysis.ts"],"sourcesContent":["import cx from \"ts-classnames\";\r\n\r\nimport { KlippyLog } from \"../../types\";\r\nimport { searchForAbnormalTemperatureSpikes } from \"../../utils/analysis\";\r\n\r\ninterface Props {\r\n  klippyLog: KlippyLog;\r\n}\r\n\r\nexport default function Analysis({ klippyLog }: Props) {\r\n  return (\r\n    <div className={cx()}>\r\n      <h2>General Analysis</h2>\r\n      {klippyLog.stats.length.toLocaleString()} stats entries\r\n      <h2>Temperature Analysis</h2>\r\n      {JSON.stringify(searchForAbnormalTemperatureSpikes(klippyLog))}\r\n    </div>\r\n  );\r\n}\r\n","import { KlippyLog, Temps } from \"../types\";\r\nimport { statsToTemps } from \".\";\r\n\r\nfunction calculateRunningAverages(allTemps: Temps[]) {\r\n  const averages: Temps[] = [];\r\n\r\n  let runningTemps: Temps[] = [];\r\n  for (const temps of allTemps) {\r\n    runningTemps = runningTemps.slice(1, 5).concat(temps);\r\n    const average: Temps = { time: temps.time, temps: {} };\r\n\r\n    runningTemps.forEach((temps) =>\r\n      Object.entries(temps.temps).forEach(([key, value]) => {\r\n        average.temps[key] = (average.temps[key] || 0) + value;\r\n      })\r\n    );\r\n\r\n    averages.push({\r\n      time: average.time,\r\n      temps: Object.fromEntries(\r\n        Object.entries(average.temps).map(([key, value]) => [key, value / runningTemps.length])\r\n      ),\r\n    });\r\n  }\r\n\r\n  return averages;\r\n}\r\nexport function searchForAbnormalTemperatureSpikes(log: KlippyLog) {\r\n  const allTemps = statsToTemps(log.stats);\r\n  const averages = calculateRunningAverages(allTemps);\r\n\r\n  const anomalies = [];\r\n  let lastAverage = averages[0];\r\n  for (const average of averages.slice(1)) {\r\n    for (const [key, value] of Object.entries(average)) {\r\n      if (lastAverage.temps[key] > 0 && value > lastAverage.temps[key] * 1.2) {\r\n        anomalies.push({\r\n          time: average.time,\r\n          name: key,\r\n          previousAverage: lastAverage.temps[key],\r\n          value,\r\n        });\r\n      }\r\n    }\r\n    lastAverage = average;\r\n  }\r\n\r\n  return anomalies;\r\n}\r\n"],"names":["$lBpE3","parcelRequire","$8992991614eaf5e4$export$2e2bcd8739ae039","param","klippyLog","jsxs","className","$parcel$interopDefault","$kOpwP","jsx","stats","length","toLocaleString","JSON","stringify","$cpdFe","searchForAbnormalTemperatureSpikes","$5Sbbl","$4eff554259264e8b$export$948a1c9e364f20e5","log","averages","allTemps","runningTemps","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","temps1","value","slice","concat","average","time","temps","forEach","Object","entries","key","_param","push","fromEntries","map","_iterator","Symbol","iterator","next","done","_loop","err","return","$4eff554259264e8b$var$calculateRunningAverages","$dHI7O","statsToTemps","anomalies","lastAverage","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","_value","slicedToArray","name","previousAverage"],"version":3,"file":"Analysis.8db21275.js.map"}