{"mappings":"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","sources":["src/Routes/KlippyLog/TempGraph.tsx"],"sourcesContent":["import { LineChart, LinesChart } from \"echarts/charts\";\r\nimport {\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  DataZoomInsideComponent,\r\n  DataZoomSliderComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  MarkAreaComponent,\r\n  TitleComponent,\r\n  ToolboxComponent,\r\n  TooltipComponent,\r\n} from \"echarts/components\";\r\nimport * as echarts from \"echarts/core\";\r\nimport { CanvasRenderer } from \"echarts/renderers\";\r\nimport ECharts from \"echarts-for-react/lib/core\";\r\nimport produce from \"immer\";\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport colors from \"tailwindcss/colors\";\r\nimport cx from \"ts-classnames\";\r\n\r\nimport { KlippyLog, Temps } from \"../../types\";\r\nimport { statsToTemps } from \"../../utils\";\r\n\r\necharts.use([\r\n  LineChart,\r\n  LinesChart,\r\n  GridComponent,\r\n  DatasetComponent,\r\n  LegendComponent,\r\n  TooltipComponent,\r\n  TitleComponent,\r\n  CanvasRenderer,\r\n  MarkAreaComponent,\r\n  DataZoomComponent,\r\n  DataZoomInsideComponent,\r\n  DataZoomSliderComponent,\r\n  ToolboxComponent,\r\n]);\r\ntype Props = { klippyLog: KlippyLog };\r\n\r\nasync function* locateProblematicAreas(\r\n  allTemps: Temps[]\r\n): AsyncGenerator<[string, [{ name: string; xAxis: number }, { xAxis: number }]]> {\r\n  let lastTemps: Temps = allTemps[1];\r\n\r\n  for (let tempIdx = 2; tempIdx < allTemps.length; tempIdx++) {\r\n    const temps = allTemps[tempIdx];\r\n    const elapsed = temps.time - lastTemps.time;\r\n\r\n    for (const [heater, temperature] of Object.entries(temps.temps)) {\r\n      if (temperature === 0 || lastTemps.temps[heater] === 0) continue;\r\n\r\n      const delta = temperature - lastTemps.temps[heater];\r\n\r\n      if (Math.abs(delta / elapsed) > 10) {\r\n        yield [\r\n          heater,\r\n          [\r\n            {\r\n              name: `${heater} changed ${delta.toFixed(1)}C`,\r\n              xAxis: tempIdx - 1,\r\n            },\r\n            { xAxis: tempIdx },\r\n          ],\r\n        ];\r\n      }\r\n    }\r\n\r\n    lastTemps = temps;\r\n  }\r\n}\r\n\r\ntype ChartData = {\r\n  time: number[];\r\n  legend: string[];\r\n  series: Array<{ name: string; type: \"line\"; data: [number, number][] }>;\r\n};\r\n\r\nexport default function TempGraph({ klippyLog: { stats, epoch } }: Props) {\r\n  const chart = useRef<ECharts>(null);\r\n  const [chartData, setChartData] = useState<null | ChartData>(null);\r\n  const [markAreas, setMarkAreas] = useState<{\r\n    [seriesName: string]: Array<[{ name: string; xAxis: number }, { xAxis: number }]>;\r\n  }>({});\r\n\r\n  const temps = useMemo(() => statsToTemps(stats), [stats]);\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      console.time(\"calc chartData\");\r\n      const keys = Object.keys(temps[0].temps);\r\n\r\n      const chartData: ChartData = {\r\n        time: new Array(temps.length),\r\n        legend: keys,\r\n        series: keys.map((key) => ({ name: key, type: \"line\", data: new Array(temps.length) })),\r\n      };\r\n\r\n      for (let i = 0; i < temps.length; i++) {\r\n        keys.forEach((key, idx) => {\r\n          chartData.series[idx].data[i] = [temps[i].time, temps[i].temps[key]];\r\n        });\r\n      }\r\n\r\n      console.timeEnd(\"calc chartData\");\r\n      setChartData(chartData);\r\n    })();\r\n  }, [epoch, temps]);\r\n\r\n  useEffect(() => {\r\n    setMarkAreas({});\r\n\r\n    (async function () {\r\n      for await (const [heater, markedArea] of locateProblematicAreas(temps)) {\r\n        setMarkAreas(\r\n          produce((draft) => {\r\n            if (!draft[heater]) draft[heater] = [];\r\n            draft[heater].push(markedArea);\r\n          })\r\n        );\r\n      }\r\n    })();\r\n  }, [temps, setMarkAreas]);\r\n\r\n  return (\r\n    <section>\r\n      <h3 className={cx(\"text-xl\")}>Temperatures over time</h3>\r\n\r\n      {chartData ? (\r\n        <ECharts\r\n          echarts={echarts}\r\n          ref={chart}\r\n          style={{ height: markAreas ? \"600px\" : \"500px\" }}\r\n          option={{\r\n            darkMode: true,\r\n            textStyle: { color: \"rgb(229, 231, 235)\" },\r\n\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: { yAxisIndex: \"none\" },\r\n                saveAsImage: {},\r\n              },\r\n            },\r\n            tooltip: { trigger: \"axis\" },\r\n            dataZoom: [{ type: \"slider\" }, { type: \"inside\" }],\r\n            legend: {\r\n              textStyle: { color: \"rgb(229, 231, 235)\" },\r\n              data: chartData.legend,\r\n            },\r\n            grid: {\r\n              top: markAreas ? 180 : 80,\r\n              bottom: 100,\r\n            },\r\n            xAxis: {\r\n              type: \"category\",\r\n              axisLabel: {\r\n                formatter(v: string) {\r\n                  return new Date((parseFloat(v) + epoch) * 1000).toLocaleTimeString();\r\n                },\r\n              },\r\n              // data: chartData.time\r\n            },\r\n            yAxis: { type: \"value\" },\r\n            series: chartData.series.map((series) => ({\r\n              ...series,\r\n              ...(series.name in markAreas\r\n                ? {\r\n                    markArea: {\r\n                      itemStyle: { color: colors.red[500] },\r\n                      label: { offset: [-20, 15], rotate: -60 },\r\n                      data: markAreas[series.name],\r\n                    },\r\n                  }\r\n                : {}),\r\n            })),\r\n          }}\r\n        />\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n\r\n      {markAreas && chartData ? (\r\n        <div className={cx(\"mt-2\")}>\r\n          <h3 className={cx(\"text-xl\", \"text-red-400\")}>Problems were identified</h3>\r\n\r\n          <article>\r\n            <p>\r\n              Large jumps in temperature are often indicative of a broken wire, or a thermometer that is not working\r\n              properly.\r\n            </p>\r\n            {\"extruder\" in markAreas && <p></p>}\r\n          </article>\r\n\r\n          <table className={cx(\"table\", \"table-zebra\", \"table-compact\", \"w-full\")}>\r\n            {Object.entries(markAreas).map(([heater, markedAreas]) => (\r\n              <Fragment key={heater}>\r\n                <thead>\r\n                  <tr>\r\n                    <th className={cx(\"text-lg\")} colSpan={2}>\r\n                      {heater}\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                  <tr>\r\n                    <td colSpan={2}>\r\n                      {heater === \"extruder\"\r\n                        ? `\r\n                        Your extruder is showing spikes in temperature. There is probably a loose crimp, or a broken\r\n                        wire in your cable chains.\r\n                        `\r\n                        : heater === \"bed\"\r\n                        ? `\r\n                        Your bed is showing spikes in temperature. If you have a moving bed, you probably have a loose\r\n                        crimp or a broken wire. If your bed is static, you have more serious problems.\r\n                        `\r\n                        : `\r\n                        Your thermometer ${heater} is showing spikes in temperature. If this thermometer moves, such \r\n                        as a chamber thermistor on a toolhead PCB, you most likely have a bad crimp or broken wire in \r\n                        your cable chain.\r\n\r\n                        If this is a static thermistor, you should check all wiring, crimps, and then verify other \r\n                        thermistors are working properly. Thermistors can rarely break, although it is also possible\r\n                        your control board has a problem. Bad wiring causing voltage to leak to ground is also a\r\n                        possibility.\r\n                        `}\r\n                    </td>\r\n                  </tr>\r\n                  {markedAreas.map(([start]) => (\r\n                    <tr key={start.xAxis}>\r\n                      <td>{new Date((epoch + start.xAxis) * 1000).toLocaleTimeString()}</td>\r\n                      <td>{start.name}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Fragment>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      ) : null}\r\n    </section>\r\n  );\r\n}\r\n"],"names":["$5Sbbl","parcelRequire","$996412f894266919$var$locateProblematicAreas","allTemps","_locateProblematicAreas","apply","this","arguments","wrapAsyncGenerator","$parcel$interopDefault","$4Z8U5","mark","_callee","lastTemps","tempIdx","temps","elapsed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","heater","temperature","delta","length","time","undefined","Object","entries","Symbol","iterator","next","done","value","Math","abs","name","concat","toFixed","xAxis","_ctx","t0","return","$996412f894266919$export$2e2bcd8739ae039","param1","klippyLog","stats","_klippyLog","epoch","chart","$6cds3","useRef","ref","slicedToArray","useState","chartData1","setChartData","ref1","markAreas","setMarkAreas","useMemo","$dHI7O","statsToTemps","useEffect","asyncToGenerator","keys","chartData","i","console","Array","legend","series","map","key","type","data","forEach","idx","timeEnd","markedArea","__value","$dL2yA","default","draft","push","$lBpE3","jsxs","jsx","className","$kOpwP","$jubMy","echarts","$caeCS","style","height","option","darkMode","textStyle","color","toolbox","feature","dataZoom","yAxisIndex","saveAsImage","tooltip","trigger","grid","top","bottom","axisLabel","formatter","v","Date","parseFloat","toLocaleTimeString","yAxis","objectSpread","markArea","itemStyle","$5RRVy","red","label","offset","rotate","param2","_param1","markedAreas","Fragment","colSpan","param","start","use","$5O9u4","LineChart","LinesChart","$3fYuu","GridComponent","DatasetComponent","LegendComponent","TooltipComponent","TitleComponent","$5RUSV","CanvasRenderer","MarkAreaComponent","DataZoomComponent","DataZoomInsideComponent","DataZoomSliderComponent","ToolboxComponent"],"version":3,"file":"TempGraph.e00a99f9.js.map"}