{"mappings":"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","sources":["src/Routes/KlippyLog/ConfigFile.tsx","src/utils/KlipperConfigParser.ts"],"sourcesContent":["import React, { useCallback, useMemo } from \"react\";\r\nimport { BsArrowUp, BsDownload, BsLink } from \"react-icons/bs\";\r\nimport cx from \"ts-classnames\";\r\n\r\nimport Button from \"../../Components/Buttons\";\r\nimport { KlippyLog } from \"../../types\";\r\nimport KlipperConfigParser, { ConfigFile, Section } from \"../../utils/KlipperConfigParser\";\r\n\r\ntype Props = {\r\n  klippyLog: KlippyLog;\r\n};\r\nexport default function ConfigFile({ klippyLog }: Props) {\r\n  const config = useMemo(() => {\r\n    const parser = new KlipperConfigParser();\r\n    try {\r\n      return parser.parse(klippyLog.config);\r\n    } catch (e) {\r\n      console.error(e);\r\n      return null;\r\n    }\r\n  }, [klippyLog]);\r\n\r\n  const downloadConfig = useCallback(() => {\r\n    if (!klippyLog) return;\r\n\r\n    const blob = new Blob([klippyLog.config], { type: \"text/plain\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = \"printer.cfg\";\r\n    a.click();\r\n  }, [klippyLog]);\r\n\r\n  return (\r\n    <div>\r\n      <h2 className={cx(\"flex\", \"flex-row\", \"justify-between\")}>\r\n        <span>Klipper Config</span>\r\n        <Button btn=\"Light\" onClick={downloadConfig} className={cx(\"flex\", \"flex-row\")}>\r\n          <BsDownload /> download\r\n        </Button>\r\n      </h2>\r\n\r\n      {config && (\r\n        <div className={cx(\"sticky\", \"top-4\", \"float-right\")}>\r\n          <ul>\r\n            <li className={cx(\"text-lg\", \"flex\", \"justify-between\", \"items-center\")}>\r\n              TOC\r\n              <a href=\"#\" onClick={() => window.scrollTo({ top: 0 })}>\r\n                <BsArrowUp />\r\n              </a>\r\n            </li>\r\n            {Object.entries(config).map(([key]) => (\r\n              <li key={key}>\r\n                <a href={\"#\" + [\"config\", key].join(\"--\")} className={cx(\"text-gray-800\", \"dark:text-gray-200\")}>\r\n                  {key}\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <code>{config && <RecursiveObject object={config} />}</code>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction RecursiveObject({ object, path = [] }: { object: ConfigFile | Section; path?: string[] }) {\r\n  return (\r\n    <>\r\n      {Object.entries(object).map(([key, value]) => (\r\n        <div className={cx(\"pl-4\")} key={key}>\r\n          <div id={[\"config\", path.join(\"-\"), key].filter(Boolean).join(\"--\")} className={cx(\"font-bold\")}>\r\n            <a\r\n              className={cx(\"group\", \"focus:text-blue-300\", \"dark:focus:text-blue-300\")}\r\n              href={\"#\" + [\"config\", path.join(\"-\"), key].filter(Boolean).join(\"--\")}\r\n            >\r\n              <BsLink className={cx(\"inline-block\", \"mr-1\", \"invisible\", \"group-hover:visible\")} />\r\n              {key}\r\n            </a>\r\n\r\n            {typeof value === \"number\" || typeof value === \"boolean\" ? (\r\n              ` = ${value}`\r\n            ) : typeof value === \"string\" ? (\r\n              <>\r\n                {\" \"}\r\n                = <pre className={\"inline-block\"}>{value}</pre>\r\n              </>\r\n            ) : null}\r\n          </div>\r\n          <div className={cx()}>\r\n            {typeof value === \"number\" ||\r\n            typeof value === \"boolean\" ||\r\n            typeof value === \"string\" ? null : value instanceof Array ? (\r\n              <ul>\r\n                {value.map((o, i) => (\r\n                  <li key={i}>{o}</li>\r\n                ))}\r\n              </ul>\r\n            ) : value instanceof Object ? (\r\n              <RecursiveObject path={[...path, key]} object={value} />\r\n            ) : (\r\n              \"ERROR\"\r\n            )}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","export type Section = {\r\n  [key: string]: string | number | boolean | string[] | number[] | Section;\r\n};\r\nexport type ConfigFile = { [key: string]: Section };\r\n\r\nexport default class KlipperConfigParser {\r\n  parse(text: string): ConfigFile {\r\n    const config: ConfigFile = {};\r\n    let current_section_path: string[] = [];\r\n    let current_section: ConfigFile | Section = config;\r\n    let current_multi_line_key: null | string = null;\r\n\r\n    for (const line of text.split(\"\\n\")) {\r\n      if (line.startsWith(\"[\")) {\r\n        current_section_path = line\r\n          .slice(line.indexOf(\"[\") + 1, line.lastIndexOf(\"]\"))\r\n          .split(\" \");\r\n\r\n        // Populate\r\n        current_section = config;\r\n        for (const section of current_section_path) {\r\n          if (!current_section[section]) {\r\n            current_section[section] = {};\r\n          }\r\n          current_section = current_section[section] as Section;\r\n        }\r\n      } else if (current_multi_line_key && line.startsWith(\"\\t\")) {\r\n        if (!current_section[current_multi_line_key]) {\r\n          current_section[current_multi_line_key] = line.slice(1);\r\n        } else {\r\n          current_section[current_multi_line_key] += \"\\n\" + line.slice(1);\r\n        }\r\n      } else {\r\n        if (current_multi_line_key) {\r\n          current_multi_line_key = null;\r\n        }\r\n\r\n        const [key, value] = line.split(\"=\", 2).map((s) => s.trim());\r\n        current_multi_line_key = key;\r\n\r\n        if (value) {\r\n          current_section[key.trim()] =\r\n            value.toLocaleLowerCase() === \"true\"\r\n              ? true\r\n              : value.toLowerCase() === \"false\"\r\n              ? false\r\n              : /^\\d+$/.test(value)\r\n              ? parseInt(value)\r\n              : /^\\d+\\.\\d+$/.test(value)\r\n              ? parseFloat(value)\r\n              : value;\r\n        }\r\n      }\r\n    }\r\n\r\n    return config;\r\n  }\r\n}\r\n"],"names":["$bbzbN","parcelRequire","$2770c6b6ca36691b$export$2e2bcd8739ae039","klippyLog","config","$7fPBF","useMemo","parser","$18Y94","default","parse","e","console","error","downloadConfig","useCallback","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","jsxs","className","$parcel$interopDefault","$UBbba","jsx","$5de0w","btn","onClick","$8bTKe","BsDownload","window","scrollTo","top","BsArrowUp","Object","entries","map","key","join","$2770c6b6ca36691b$var$RecursiveObject","object","path","Fragment","value","id","filter","Boolean","BsLink","Array","o","i","$c18105375693a351$export$2e2bcd8739ae039","text","current_section_path","current_section","current_multi_line_key","line","split","startsWith","slice","indexOf","lastIndexOf","section","s","trim","toLocaleLowerCase","toLowerCase","test","parseInt","parseFloat"],"version":3,"file":"ConfigFile.59872dd5.js.map"}