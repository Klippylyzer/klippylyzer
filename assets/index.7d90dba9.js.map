{"version":3,"file":"index.js","sources":["src/utils/index.ts","src/worker/index.ts"],"sourcesContent":["import { KlippyLog, Stats, Temps } from \"../types\";\n\nfunction parseKlippyLine(line: string, epoch: number): Stats {\n  /*\n       Parses lines similar to \n         Stats 181891.6: gcodein=0 mcu: mcu_awake=0.014 mcu_task_avg=0.000022 mcu_task_stddev=0.000029 bytes_write=3313562 bytes_read=1126126 bytes_retransmit=0 bytes_invalid=0 send_seq=77515 receive_seq=77514 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=30 stalled_bytes=3326 freq=180003476 rpi: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=10147 bytes_read=33138 bytes_retransmit=0 bytes_invalid=0 send_seq=1666 receive_seq=1666 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999586 adj=49998638 sd_pos=264628 heater_bed: target=60 temp=60.1 pwm=0.127 chamber: temp=27.9 mcu: temp=31.3 raspberry_pi: temp=44.0 sysload=1.40 cputime=269.122 memavail=552400 print_time=1561.763 buffer_time=2.417 print_stall=0 extruder: target=220 temp=225.8 pwm=0.000\n       into an object with the following structure:\n          {\n              time: 181891.6,\n              values: {\n                  \"gcodein\": \"0\",\n                  \"mcu\": {\n                      \"mcu_awake\": \"0.014\",\n                      ...\n                  }, \n                  ...\n              }\n          }\n      */\n\n  const [, time, ...parts] = line.split(\" \");\n  const stats: Stats = {\n    time: parseFloat(time.slice(0, time.length - 1)) + epoch,\n    values: { klippy: {} },\n  };\n\n  let section = \"klippy\";\n  for (const part of parts) {\n    if (part.endsWith(\":\")) {\n      section = part.slice(0, part.length - 1);\n      stats.values[section] = {};\n    } else {\n      const [key, value] = part.split(\"=\", 2);\n      (section ? stats.values[section] : stats.values)[key] = parseFloat(value);\n    }\n  }\n\n  return stats;\n}\n\nfunction extractLastConfig(log: string): string {\n  // Grab the section of text between the lines \"===== Config file =====\" and \"=======================\"\n\n  return log.slice(log.lastIndexOf(\"===== Config file =====\") + 24, log.lastIndexOf(\"=======================\"));\n}\n\nfunction extractEpoch(log: string): number {\n  // Start printer at Tue May 31 11:43:46 2022 (1654015426.9 180343.4)\n  const match = /^Start printer at [\\w\\d :]+ \\((\\d+\\.\\d+) (\\d+\\.\\d+)\\)$/m.exec(log);\n  console.log(match);\n  if (match) {\n    return parseFloat(match[1]) - parseFloat(match[2]);\n  }\n  return 0;\n}\n\nexport function parseKlippyLog(raw: string): KlippyLog {\n  let epoch = extractEpoch(raw);\n  return {\n    raw,\n    config: extractLastConfig(raw),\n    stats: raw.split(\"\\n\").reduce((stats, line) => {\n      if (line.startsWith(\"Start printer at \")) {\n        epoch = extractEpoch(line);\n        console.log(\"new epoch \", epoch);\n      } else if (line.startsWith(\"Stats \")) {\n        stats.push(parseKlippyLine(line, epoch));\n      }\n\n      return stats;\n    }, [] as Stats[]),\n  };\n}\n\nexport function statsToTemps(stats: Array<Stats>): Array<Temps> {\n  return stats.map((stat) => ({\n    time: stat.time,\n    temps: Object.fromEntries(\n      Object.entries(stat.values)\n        .filter(([, value]) => value.temp !== undefined)\n        .map(([key, value]) => [key, value.temp])\n    ),\n  }));\n}\n\nexport function humanSize(bytes: number): string {\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\n  if (bytes === 0) return \"0 B\";\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;\n}\n","import { KlippyLog, KlippyWorkerMessages, KlippyWorkerRequests } from \"../types\";\nimport { parseKlippyLog } from \"../utils\";\n\nasync function parseFiles(files: FileList): Promise<KlippyLog> {\n  const fileContents = (\n    await Promise.all(\n      Array.from(files).map(\n        (file) =>\n          new Promise<string>(function (resolve, reject) {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result as string);\n            reader.onerror = reject;\n            reader.readAsText(file);\n          })\n      )\n    )\n  ).join(\"\\n\");\n\n  return parseKlippyLog(fileContents);\n}\n\nasync function handleMessage(message: KlippyWorkerRequests): Promise<null | KlippyWorkerMessages> {\n  switch (message.type) {\n    case \"parseFiles\":\n      return {\n        type: \"parseFiles\",\n        klippyLog: await parseFiles(message.data),\n      };\n  }\n}\n\nglobalThis.postMessage({ type: \"ready\" });\nglobalThis.addEventListener(\"message\", (e: MessageEvent<KlippyWorkerRequests>) =>\n  handleMessage(e.data).then((r) => r && globalThis.postMessage(r))\n);\n"],"names":[],"mappings":"yBAEA,WAAyB,EAAc,EAAsB,CAkB3D,KAAM,CAAA,CAAG,KAAS,GAAS,EAAK,MAAM,GAAG,EACnC,EAAe,CACnB,KAAM,WAAW,EAAK,MAAM,EAAG,EAAK,OAAS,CAAC,CAAC,EAAI,EACnD,OAAQ,CAAE,OAAQ,EAAG,CAAA,EAGvB,GAAI,GAAU,SACd,SAAW,KAAQ,GACb,GAAA,EAAK,SAAS,GAAG,EACnB,EAAU,EAAK,MAAM,EAAG,EAAK,OAAS,CAAC,EACjC,EAAA,OAAO,GAAW,OACnB,CACL,KAAM,CAAC,EAAK,GAAS,EAAK,MAAM,IAAK,CAAC,EACrC,AAAA,GAAU,EAAM,OAAO,GAAW,EAAM,QAAQ,GAAO,WAAW,CAAK,CAC1E,CAGK,MAAA,EACT,CAEA,WAA2B,EAAqB,CAGvC,MAAA,GAAI,MAAM,EAAI,YAAY,yBAAyB,EAAI,GAAI,EAAI,YAAY,yBAAyB,CAAC,CAC9G,CAEA,WAAsB,EAAqB,CAEnC,KAAA,GAAQ,0DAA0D,KAAK,CAAG,EAEhF,MADA,SAAQ,IAAI,CAAK,EACb,EACK,WAAW,EAAM,EAAE,EAAI,WAAW,EAAM,EAAE,EAE5C,CACT,CAEO,WAAwB,EAAwB,CACjD,GAAA,GAAQ,EAAa,CAAG,EACrB,MAAA,CACL,MACA,OAAQ,EAAkB,CAAG,EAC7B,MAAO,EAAI,MAAM;AAAA,CAAI,EAAE,OAAO,CAAC,EAAO,IAChC,CAAA,EAAK,WAAW,mBAAmB,EACrC,GAAQ,EAAa,CAAI,EACjB,QAAA,IAAI,aAAc,CAAK,GACtB,EAAK,WAAW,QAAQ,GACjC,EAAM,KAAK,EAAgB,EAAM,CAAK,CAAC,EAGlC,GACN,EAAa,CAAA,CAEpB,CCrEA,iBAA0B,EAAqC,CAC7D,KAAM,GACJ,MAAM,SAAQ,IACZ,MAAM,KAAK,CAAK,EAAE,IAChB,AAAC,GACC,GAAI,SAAgB,SAAU,EAAS,EAAQ,CACvC,KAAA,GAAS,GAAI,YACnB,EAAO,OAAS,IAAM,EAAQ,EAAO,MAAgB,EACrD,EAAO,QAAU,EACjB,EAAO,WAAW,CAAI,CACvB,CAAA,CACL,CACF,GACA,KAAK;AAAA,CAAI,EAEX,MAAO,GAAe,CAAY,CACpC,CAEA,iBAA6B,EAAqE,CAChG,OAAQ,EAAQ,UACT,aACI,MAAA,CACL,KAAM,aACN,UAAW,KAAM,GAAW,EAAQ,IAAI,CAAA,EAGhD,CAEA,WAAW,YAAY,CAAE,KAAM,OAAS,CAAA,EACxC,WAAW,iBAAiB,UAAW,AAAC,GACtC,EAAc,EAAE,IAAI,EAAE,KAAK,AAAC,GAAM,GAAK,WAAW,YAAY,CAAC,CAAC,CAClE"}