{"mappings":"MAEA,SAASA,EAAgBC,GAmCvB,MAAY,CAACC,KAAAC,GAAAF,EAAAG,MAAA,KACdC,EAAA,CACMH,KAASI,WAAAJ,EAAAK,MAAA,EAAAL,EAAAM,OAAe,IAC7BC,OAAA,CACMC,OAAA,K,IAOJC,EAAQ,S,IACR,IAAKC,KAAET,EACP,GAAAS,EAAAC,SAAA,K,EACSD,EACNL,MAAQ,EAAAK,EAASJ,OAAK,GAAoBH,EAC3CI,OAAAE,GAAiB,OAChB,CACH,MAAAG,EAAAC,GAAAH,EAAAR,MAAA,QACHO,EAAAN,EAAAI,OAAAE,GAAAN,EAAAI,QAAAK,GAAAC,E,SC5CDC,eAAeC,EAAWC,GAaxB,O,qMAAOC,QAZoBC,QAAQC,IACjCC,MAAMC,KAAKL,GAAOM,KACfC,GACC,IAAIL,SAAgB,SAAUM,EAASC,GACrC,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,IAAMJ,EAAQE,EAAOG,QACrCH,EAAOI,QAAUL,EACjBC,EAAOK,WAAWR,UAKSS,KAAK,OAsB1CC,WAAWC,YAAY,CAAEC,KAAM,UAC/BF,WAAWG,iBAAiB,WAAYC,GApBxCvB,eACEwB,GAEA,OAAQA,EAAQH,MACd,IAAK,MAEH,YADAI,QAAQC,IAAIP,WAAY,MAAOK,EAAQG,MAGzC,IAAK,aACH,MAAO,CACLN,KAAM,aACNM,WAAY1B,EAAWuB,EAAQG,OAGnC,IAAK,OACH,MAAO,CAAEN,KAAM,OAAQM,KAAMH,EAAQG,OAMzCC,CAAcL,EAAEI,MAAME,MAAMC,GAAMA,GAAKX,WAAWC,YAAYU,Q","sources":["src/utils.ts","src/worker.ts"],"sourcesContent":["import { KlippyLog, Stats } from \"./types\";\r\n\r\nfunction parseKlippyLine(line: string): Stats {\r\n  /*\r\n       Parses lines similar to \r\n         Stats 181891.6: gcodein=0 mcu: mcu_awake=0.014 mcu_task_avg=0.000022 mcu_task_stddev=0.000029 bytes_write=3313562 bytes_read=1126126 bytes_retransmit=0 bytes_invalid=0 send_seq=77515 receive_seq=77514 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=30 stalled_bytes=3326 freq=180003476 rpi: mcu_awake=0.000 mcu_task_avg=0.000008 mcu_task_stddev=0.000012 bytes_write=10147 bytes_read=33138 bytes_retransmit=0 bytes_invalid=0 send_seq=1666 receive_seq=1666 retransmit_seq=0 srtt=0.000 rttvar=0.000 rto=0.025 ready_bytes=0 stalled_bytes=0 freq=49999586 adj=49998638 sd_pos=264628 heater_bed: target=60 temp=60.1 pwm=0.127 chamber: temp=27.9 mcu: temp=31.3 raspberry_pi: temp=44.0 sysload=1.40 cputime=269.122 memavail=552400 print_time=1561.763 buffer_time=2.417 print_stall=0 extruder: target=220 temp=225.8 pwm=0.000\r\n       into an object with the following structure:\r\n          {\r\n              time: 181891.6,\r\n              values: {\r\n                  \"gcodein\": \"0\",\r\n                  \"mcu\": {\r\n                      \"mcu_awake\": \"0.014\",\r\n                      ...\r\n                  }, \r\n                  ...\r\n              }\r\n          }\r\n      */\r\n\r\n  const [, time, ...parts] = line.split(\" \");\r\n  const stats = {\r\n    time: parseFloat(time.slice(0, time.length - 1)),\r\n    values: { klippy: {} },\r\n  };\r\n\r\n  let section = \"klippy\";\r\n  for (let part of parts) {\r\n    if (part.endsWith(\":\")) {\r\n      section = part.slice(0, part.length - 1);\r\n      stats.values[section] = {};\r\n    } else {\r\n      const [key, value] = part.split(\"=\", 2);\r\n      (section ? stats.values[section] : stats.values)[key] = value;\r\n    }\r\n  }\r\n\r\n  return stats;\r\n}\r\nexport function parseKlippyLog(contents: string): KlippyLog {\r\n  // Grab the section of text between the lines \"===== Config file =====\" and \"=======================\"\r\n  const configSection = contents.slice(\r\n    contents.lastIndexOf(\"===== Config file =====\"),\r\n    contents.lastIndexOf(\"=======================\")\r\n  );\r\n\r\n  return {\r\n    raw: contents,\r\n    config: configSection,\r\n    stats: contents\r\n    //   .slice(contents.lastIndexOf(\"===== Config file =====\"))\r\n      .split(\"\\n\")\r\n      .filter((line) => line.startsWith(\"Stats \"))\r\n      //   .slice(-100)\r\n      .map(parseKlippyLine),\r\n  };\r\n}\r\n","import { KlippyLog } from \"./types\";\r\nimport { parseKlippyLog } from \"./utils\";\r\n\r\ntype KlippyWorkerRequest =\r\n  | { type: \"log\"; data: any }\r\n  | { type: \"echo\"; data: any }\r\n  | { type: \"parseFiles\"; data: FileList };\r\n\r\ntype KlippyWorkerResponses =\r\n  | { type: \"echo\"; data: any }\r\n  | { type: \"parseFiles\"; data: KlippyLog };\r\n\r\nasync function parseFiles(files: FileList): Promise<KlippyLog> {\r\n  const fileContents = await Promise.all(\r\n    Array.from(files).map(\r\n      (file) =>\r\n        new Promise<string>(function (resolve, reject) {\r\n          const reader = new FileReader();\r\n          reader.onload = () => resolve(reader.result as string);\r\n          reader.onerror = reject;\r\n          reader.readAsText(file);\r\n        })\r\n    )\r\n  );\r\n\r\n  return parseKlippyLog(fileContents.join(\"\\n\"));\r\n}\r\n\r\nasync function handleMessage(\r\n  message: KlippyWorkerRequest\r\n): Promise<null | KlippyWorkerResponses> {\r\n  switch (message.type) {\r\n    case \"log\":\r\n      console.log(globalThis, \"log\", message.data);\r\n      return;\r\n\r\n    case \"parseFiles\":\r\n      return {\r\n        type: \"parseFiles\",\r\n        data: await parseFiles(message.data),\r\n      };\r\n\r\n    case \"echo\":\r\n      return { type: \"echo\", data: message.data };\r\n  }\r\n}\r\n\r\nglobalThis.postMessage({ type: \"ready\" });\r\nglobalThis.addEventListener(\"message\", (e: MessageEvent<KlippyWorkerRequest>) =>\r\n  handleMessage(e.data).then((r) => r && globalThis.postMessage(r))\r\n);\r\n"],"names":["$9e36d0d5f1828945$var$parseKlippyLine","line","time","parts","split","stats","parseFloat","slice","length","values","klippy","section","part","endsWith","key","value","async","$96b46f58b0346c9b$var$parseFiles","files","$9e36d0d5f1828945$export$cb9b658f38a57f42","Promise","all","Array","from","map","file","resolve","reject","reader","FileReader","onload","result","onerror","readAsText","join","globalThis","postMessage","type","addEventListener","e","message","console","log","data","$96b46f58b0346c9b$var$handleMessage","then","r"],"version":3,"file":"worker.b34481b8.js.map"}