{"mappings":"wdAAA,IAAAA,EAAAC,EAAA,S,oDAWe,SAAAC,GAXfC,UAW8BA,IAC5B,OACEH,EAAAI,KAAC,UAAO,C,UACNJ,EAAAK,IAAC,KAAE,CAACC,UAAWC,EAAAC,EAAA,CAAG,W,SAAY,YAE7BL,EAAUM,IAAIC,OAAS,IACtBV,EAAAK,IAAC,MAAG,C,SAAEF,EAAUM,MAEhBT,EAAAK,IAACM,EAAAC,WAAU,CAACC,SAAS,MAAMC,MAAOC,EAAAC,Q,SAC/Bb,EAAUM,SAbrBE,EAAAC,WAAWK,iBAAiB,MAAOC,EAAAF,Y,gFCPnC,IAEAG,EAAeZ,EAFfN,EAAA,a,kCCKA,SAASmB,EAAIC,GAKXA,EAAMC,UAAUC,IAAM,CACpBC,OAAQ,CAENC,QAAO,2DACPC,QAAQ,GAEVC,UAAW,CACTF,QAAO,uIAEPG,YAAY,EACZF,QAAQ,EACRG,MAAO,CAAC,iBAAkB,2BAC1BC,OAAQT,EAAMC,UAA0B,gBAAK,CAC3CS,QAAO,SACPC,SAAQ,qBACRC,YAAW,WAGfC,MAAO,CACL,CACET,QAAO,6EAEPI,MAAO,CAAC,QAAS,cAEnB,CACEJ,QAAO,2BACPI,MAAO,CAAC,UAAW,cAErB,CACEJ,QAAO,yCACPI,MAAO,CAAC,OAAQ,YAElB,CACEJ,QAAO,yBACPI,MAAO,CAAC,QAAS,YAEnB,CACEJ,QAAO,6CACPI,MAAO,CAAC,QAAS,aAGrBM,SAAU,CACRV,QAAO,wFAEPG,YAAY,GAEdQ,UAAW,CACTX,QAAO,oCACPG,YAAY,EACZC,MAAO,WAETQ,IAAG,oDACHC,MAAO,CACLb,QAAO,6DACPG,YAAY,EACZC,MAAO,OAET,aAAc,CACZJ,QAAO,kCACPI,MAAO,YAET,cAAe,CACbJ,QAAO,sCACPI,MAAO,YAETU,OAAQ,CACNd,QAAO,qEAEPG,YAAY,EACZC,MAAO,YAETW,KAAM,CACJf,QAAO,oEAEPI,MAAO,YAETY,KAAM,CACJhB,QAAO,6BACPI,MAAO,YAET,YAAa,CACXJ,QAAO,qFAEPG,YAAY,EACZF,QAAQ,EACRG,MAAO,UAETa,KAAM,CACJjB,QAASkB,OACP,4DAA4DC,OAC1D,IACA,4FACGA,OACH,IACA,uKACGA,OACL,KAEFf,MAAO,UAETgB,KAAM,CACJpB,QAAO,qEAEPI,MAAO,UAETiB,QAAO,2BACPC,OAAQ,CACNtB,QAAO,yGAEPG,YAAY,GAEdoB,SAAQ,6BACRf,YAAW,YAxHfgB,EAAAC,QAAiB9B,EACjBA,EAAI+B,YAAc,MAClB/B,EAAIgC,QAAU","sources":["src/Routes/KlippyLog/LogViewer.tsx","node_modules/react-syntax-highlighter/dist/esm/languages/prism/log.js","node_modules/refractor/lang/log.js"],"sourcesContent":["import { PrismLight } from \"react-syntax-highlighter\";\r\nimport PrismLanguageLog from \"react-syntax-highlighter/dist/esm/languages/prism/log\";\r\nimport PrismThemeTomorrow from \"react-syntax-highlighter/dist/esm/styles/prism/tomorrow\";\r\nimport cx from \"ts-classnames\";\r\n\r\nimport { KlippyLog } from \"../../types\";\r\n\r\nPrismLight.registerLanguage(\"log\", PrismLanguageLog);\r\n\r\ntype Props = { klippyLog: KlippyLog };\r\n\r\nexport default function Log({ klippyLog }: Props) {\r\n  return (\r\n    <section>\r\n      <h3 className={cx(\"text-xl\")}>Raw Log</h3>\r\n\r\n      {klippyLog.raw.length > 10000 ? (\r\n        <pre>{klippyLog.raw}</pre>\r\n      ) : (\r\n        <PrismLight language=\"log\" style={PrismThemeTomorrow}>\r\n          {klippyLog.raw}\r\n        </PrismLight>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n","import log from \"refractor/lang/log.js\";\n;\nexport default log;","'use strict'\n\nmodule.exports = log\nlog.displayName = 'log'\nlog.aliases = []\nfunction log(Prism) {\n  // This is a language definition for generic log files.\n  // Since there is no one log format, this language definition has to support all formats to some degree.\n  //\n  // Based on https://github.com/MTDL9/vim-log-highlighting\n  Prism.languages.log = {\n    string: {\n      // Single-quoted strings must not be confused with plain text. E.g. Can't isn't Susan's Chris' toy\n      pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?![st] | \\w)(?:[^'\\\\\\r\\n]|\\\\.)*'/,\n      greedy: true\n    },\n    exception: {\n      pattern:\n        /(^|[^\\w.])[a-z][\\w.]*(?:Error|Exception):.*(?:(?:\\r\\n?|\\n)[ \\t]*(?:at[ \\t].+|\\.{3}.*|Caused by:.*))+(?:(?:\\r\\n?|\\n)[ \\t]*\\.\\.\\. .*)?/,\n      lookbehind: true,\n      greedy: true,\n      alias: ['javastacktrace', 'language-javastacktrace'],\n      inside: Prism.languages['javastacktrace'] || {\n        keyword: /\\bat\\b/,\n        function: /[a-z_][\\w$]*(?=\\()/,\n        punctuation: /[.:()]/\n      }\n    },\n    level: [\n      {\n        pattern:\n          /\\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\\b/,\n        alias: ['error', 'important']\n      },\n      {\n        pattern: /\\b(?:WARN|WARNING|WRN)\\b/,\n        alias: ['warning', 'important']\n      },\n      {\n        pattern: /\\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\\b/,\n        alias: ['info', 'keyword']\n      },\n      {\n        pattern: /\\b(?:DBG|DEBUG|FINE)\\b/,\n        alias: ['debug', 'keyword']\n      },\n      {\n        pattern: /\\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\\b/,\n        alias: ['trace', 'comment']\n      }\n    ],\n    property: {\n      pattern:\n        /((?:^|[\\]|])[ \\t]*)[a-z_](?:[\\w-]|\\b\\/\\b)*(?:[. ]\\(?\\w(?:[\\w-]|\\b\\/\\b)*\\)?)*:(?=\\s)/im,\n      lookbehind: true\n    },\n    separator: {\n      pattern: /(^|[^-+])-{3,}|={3,}|\\*{3,}|- - /m,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    url: /\\b(?:file|ftp|https?):\\/\\/[^\\s|,;'\"]*[^\\s|,;'\">.]/,\n    email: {\n      pattern: /(^|\\s)[-\\w+.]+@[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)+(?=\\s)/,\n      lookbehind: true,\n      alias: 'url'\n    },\n    'ip-address': {\n      pattern: /\\b(?:\\d{1,3}(?:\\.\\d{1,3}){3})\\b/,\n      alias: 'constant'\n    },\n    'mac-address': {\n      pattern: /\\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\\b/i,\n      alias: 'constant'\n    },\n    domain: {\n      pattern:\n        /(^|\\s)[a-z][a-z0-9-]*(?:\\.[a-z][a-z0-9-]*)*\\.[a-z][a-z0-9-]+(?=\\s)/,\n      lookbehind: true,\n      alias: 'constant'\n    },\n    uuid: {\n      pattern:\n        /\\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\b/i,\n      alias: 'constant'\n    },\n    hash: {\n      pattern: /\\b(?:[a-f0-9]{32}){1,2}\\b/i,\n      alias: 'constant'\n    },\n    'file-path': {\n      pattern:\n        /\\b[a-z]:[\\\\/][^\\s|,;:(){}\\[\\]\"']+|(^|[\\s:\\[\\](>|])\\.{0,2}\\/\\w[^\\s|,;:(){}\\[\\]\"']*/i,\n      lookbehind: true,\n      greedy: true,\n      alias: 'string'\n    },\n    date: {\n      pattern: RegExp(\n        /\\b\\d{4}[-/]\\d{2}[-/]\\d{2}(?:T(?=\\d{1,2}:)|(?=\\s\\d{1,2}:))/.source +\n          '|' +\n          /\\b\\d{1,4}[-/ ](?:\\d{1,2}|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)[-/ ]\\d{2,4}T?\\b/\n            .source +\n          '|' +\n          /\\b(?:(?:Fri|Mon|Sat|Sun|Thu|Tue|Wed)(?:\\s{1,2}(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep))?|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)\\s{1,2}\\d{1,2}\\b/\n            .source,\n        'i'\n      ),\n      alias: 'number'\n    },\n    time: {\n      pattern:\n        /\\b\\d{1,2}:\\d{1,2}:\\d{1,2}(?:[.,:]\\d+)?(?:\\s?[+-]\\d{2}:?\\d{2}|Z)?\\b/,\n      alias: 'number'\n    },\n    boolean: /\\b(?:false|null|true)\\b/i,\n    number: {\n      pattern:\n        /(^|[^.\\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\\d[\\da-f]*(?:\\.\\d+)*(?:e[+-]?\\d+)?[a-z]{0,3}\\b)\\b(?!\\.\\w)/i,\n      lookbehind: true\n    },\n    operator: /[;:?<=>~/@!$%&+\\-|^(){}*#]/,\n    punctuation: /[\\[\\].,]/\n  }\n}\n"],"names":["$bbzbN","parcelRequire","$61150afaa1b48933$export$2e2bcd8739ae039","klippyLog","jsxs","jsx","className","$parcel$interopDefault","$UBbba","raw","length","$hT85A","PrismLight","language","style","$iG9kV","default","registerLanguage","$c2mcB","$8c36e4dbe735d27f$export$2e2bcd8739ae039","$0ce2bbca25db411c$var$log","Prism","languages","log","string","pattern","greedy","exception","lookbehind","alias","inside","keyword","function","punctuation","level","property","separator","url","email","domain","uuid","hash","date","RegExp","source","time","boolean","number","operator","module","exports","displayName","aliases"],"version":3,"file":"LogViewer.5fecc83a.js.map"}