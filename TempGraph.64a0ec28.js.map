{"mappings":"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","sources":["src/Routes/KlippyLog/TempGraph.tsx"],"sourcesContent":["import { LineChart, LinesChart } from \"echarts/charts\";\r\nimport {\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  DataZoomInsideComponent,\r\n  DataZoomSliderComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  MarkAreaComponent,\r\n  TitleComponent,\r\n  ToolboxComponent,\r\n  TooltipComponent,\r\n} from \"echarts/components\";\r\nimport * as echarts from \"echarts/core\";\r\nimport { CanvasRenderer } from \"echarts/renderers\";\r\nimport ECharts from \"echarts-for-react/lib/core\";\r\nimport produce from \"immer\";\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { Fragment } from \"react\";\r\nimport colors from \"tailwindcss/colors\";\r\nimport cx from \"ts-classnames\";\r\n\r\nimport { KlippyLog, Temps } from \"../../types\";\r\nimport { statsToTemps } from \"../../utils\";\r\n\r\necharts.use([\r\n  LineChart,\r\n  LinesChart,\r\n  GridComponent,\r\n  DatasetComponent,\r\n  LegendComponent,\r\n  TooltipComponent,\r\n  TitleComponent,\r\n  CanvasRenderer,\r\n  MarkAreaComponent,\r\n  DataZoomComponent,\r\n  DataZoomInsideComponent,\r\n  DataZoomSliderComponent,\r\n  ToolboxComponent,\r\n]);\r\ntype Props = { klippyLog: KlippyLog };\r\n\r\nasync function* locateProblematicAreas(\r\n  allTemps: Temps[]\r\n): AsyncGenerator<[string, [{ name: string; xAxis: number }, { xAxis: number }]]> {\r\n  let lastTemps: Temps = allTemps[1];\r\n\r\n  for (let tempIdx = 2; tempIdx < allTemps.length; tempIdx++) {\r\n    const temps = allTemps[tempIdx];\r\n    const elapsed = temps.time - lastTemps.time;\r\n\r\n    for (const [heater, temperature] of Object.entries(temps.temps)) {\r\n      if (temperature === 0 || lastTemps.temps[heater] === 0) continue;\r\n\r\n      const delta = temperature - lastTemps.temps[heater];\r\n\r\n      if (Math.abs(delta / elapsed) > 10) {\r\n        yield [\r\n          heater,\r\n          [\r\n            {\r\n              name: `${heater} changed ${delta.toFixed(1)}C`,\r\n              xAxis: tempIdx - 1,\r\n            },\r\n            { xAxis: tempIdx },\r\n          ],\r\n        ];\r\n      }\r\n    }\r\n\r\n    lastTemps = temps;\r\n  }\r\n}\r\n\r\ntype ChartData = {\r\n  time: number[];\r\n  legend: string[];\r\n  series: Array<{ name: string; type: \"line\"; data: [number, number][] }>;\r\n};\r\n\r\nexport default function TempGraph({ klippyLog: { stats, epoch } }: Props) {\r\n  const chart = useRef<ECharts>(null);\r\n  const [chartData, setChartData] = useState<null | ChartData>(null);\r\n  const [markAreas, setMarkAreas] = useState<{\r\n    [seriesName: string]: Array<[{ name: string; xAxis: number }, { xAxis: number }]>;\r\n  }>({});\r\n\r\n  const temps = useMemo(() => statsToTemps(stats), [stats]);\r\n\r\n  useEffect(() => {\r\n    (async function () {\r\n      console.time(\"calc chartData\");\r\n      const keys = Object.keys(temps[0].temps);\r\n\r\n      const chartData: ChartData = {\r\n        time: new Array(temps.length),\r\n        legend: keys,\r\n        series: keys.map((key) => ({ name: key, type: \"line\", data: new Array(temps.length) })),\r\n      };\r\n\r\n      for (let i = 0; i < temps.length; i++) {\r\n        keys.forEach((key, idx) => {\r\n          chartData.series[idx].data[i] = [temps[i].time, temps[i].temps[key]];\r\n        });\r\n      }\r\n\r\n      console.timeEnd(\"calc chartData\");\r\n      setChartData(chartData);\r\n    })();\r\n  }, [epoch, temps]);\r\n\r\n  useEffect(() => {\r\n    setMarkAreas({});\r\n\r\n    (async function () {\r\n      for await (const [heater, markedArea] of locateProblematicAreas(temps)) {\r\n        setMarkAreas(\r\n          produce((draft) => {\r\n            if (!draft[heater]) draft[heater] = [];\r\n            draft[heater].push(markedArea);\r\n          })\r\n        );\r\n      }\r\n    })();\r\n  }, [temps, setMarkAreas]);\r\n\r\n  return (\r\n    <section>\r\n      <h3 className={cx(\"text-xl\")}>Temperatures over time</h3>\r\n\r\n      {chartData ? (\r\n        <ECharts\r\n          echarts={echarts}\r\n          ref={chart}\r\n          style={{ height: markAreas ? \"600px\" : \"500px\" }}\r\n          option={{\r\n            darkMode: true,\r\n            textStyle: { color: \"rgb(229, 231, 235)\" },\r\n\r\n            toolbox: {\r\n              feature: {\r\n                dataZoom: { yAxisIndex: \"none\" },\r\n                saveAsImage: {},\r\n              },\r\n            },\r\n            tooltip: { trigger: \"axis\" },\r\n            dataZoom: [{ type: \"slider\" }, { type: \"inside\" }],\r\n            legend: {\r\n              textStyle: { color: \"rgb(229, 231, 235)\" },\r\n              data: chartData.legend,\r\n            },\r\n            grid: {\r\n              top: markAreas ? 180 : 80,\r\n              bottom: 100,\r\n            },\r\n            xAxis: {\r\n              type: \"category\",\r\n              axisLabel: {\r\n                formatter(v: string) {\r\n                  return new Date((parseFloat(v) + epoch) * 1000).toLocaleTimeString();\r\n                },\r\n              },\r\n              // data: chartData.time\r\n            },\r\n            yAxis: { type: \"value\" },\r\n            series: chartData.series.map((series) => ({\r\n              ...series,\r\n              ...(series.name in markAreas\r\n                ? {\r\n                    markArea: {\r\n                      itemStyle: { color: colors.red[500] },\r\n                      label: { offset: [-20, 15], rotate: -60 },\r\n                      data: markAreas[series.name],\r\n                    },\r\n                  }\r\n                : {}),\r\n            })),\r\n          }}\r\n        />\r\n      ) : (\r\n        <div>Loading...</div>\r\n      )}\r\n\r\n      {markAreas && chartData ? (\r\n        <div className={cx(\"mt-2\")}>\r\n          <h3 className={cx(\"text-xl\", \"text-red-400\")}>Problems were identified</h3>\r\n\r\n          <article>\r\n            <p>\r\n              Large jumps in temperature are often indicative of a broken wire, or a thermometer that is not working\r\n              properly.\r\n            </p>\r\n            {\"extruder\" in markAreas && <p></p>}\r\n          </article>\r\n\r\n          <table className={cx(\"table\", \"table-zebra\", \"table-compact\", \"w-full\")}>\r\n            {Object.entries(markAreas).map(([heater, markedAreas]) => (\r\n              <Fragment key={heater}>\r\n                <thead>\r\n                  <tr>\r\n                    <th className={cx(\"text-lg\")} colSpan={2}>\r\n                      {heater}\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                  <tr>\r\n                    <td colSpan={2}>\r\n                      {heater === \"extruder\"\r\n                        ? `\r\n                        Your extruder is showing spikes in temperature. There is probably a loose crimp, or a broken\r\n                        wire in your cable chains.\r\n                        `\r\n                        : heater === \"bed\"\r\n                        ? `\r\n                        Your bed is showing spikes in temperature. If you have a moving bed, you probably have a loose\r\n                        crimp or a broken wire. If your bed is static, you have more serious problems.\r\n                        `\r\n                        : `\r\n                        Your thermometer ${heater} is showing spikes in temperature. If this thermometer moves, such \r\n                        as a chamber thermistor on a toolhead PCB, you most likely have a bad crimp or broken wire in \r\n                        your cable chain.\r\n\r\n                        If this is a static thermistor, you should check all wiring, crimps, and then verify other \r\n                        thermistors are working properly. Thermistors can rarely break, although it is also possible\r\n                        your control board has a problem. Bad wiring causing voltage to leak to ground is also a\r\n                        possibility.\r\n                        `}\r\n                    </td>\r\n                  </tr>\r\n                  {markedAreas.map(([start]) => (\r\n                    <tr key={start.xAxis}>\r\n                      <td>{new Date((epoch + start.xAxis) * 1000).toLocaleTimeString()}</td>\r\n                      <td>{start.name}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Fragment>\r\n            ))}\r\n          </table>\r\n        </div>\r\n      ) : null}\r\n    </section>\r\n  );\r\n}\r\n"],"names":["$bbzbN","parcelRequire","$0644d0f8d7d9b6b0$export$2e2bcd8739ae039","klippyLog","stats","epoch","chart","$7fPBF","useRef","chartData1","setChartData","useState","markAreas","setMarkAreas","temps","useMemo","$3qM3Y","statsToTemps","useEffect","console","time","keys","Object","chartData","Array","length","legend","series","map","key","name","type","data","i","forEach","idx","timeEnd","heater","markedArea","async","allTemps","lastTemps","tempIdx","elapsed","temperature","entries","delta","Math","abs","toFixed","xAxis","$0644d0f8d7d9b6b0$var$locateProblematicAreas","$9GPfD","default","draft","push","jsxs","jsx","className","$parcel$interopDefault","$UBbba","$7jVw0","echarts","$fRnim","ref","style","height","option","darkMode","textStyle","color","toolbox","feature","dataZoom","yAxisIndex","saveAsImage","tooltip","trigger","grid","top","bottom","axisLabel","formatter","v","Date","parseFloat","toLocaleTimeString","yAxis","markArea","itemStyle","$6oZBh","red","label","offset","rotate","markedAreas","Fragment","colSpan","start","children","use","$5PdaA","LineChart","LinesChart","$lFsj8","GridComponent","DatasetComponent","LegendComponent","TooltipComponent","TitleComponent","$3aDr8","CanvasRenderer","MarkAreaComponent","DataZoomComponent","DataZoomInsideComponent","DataZoomSliderComponent","ToolboxComponent"],"version":3,"file":"TempGraph.64a0ec28.js.map"}