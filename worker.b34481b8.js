(()=>{function e(e){const[,t,...s]=e.split(" "),a={time:parseFloat(t.slice(0,t.length-1)),values:{klippy:{}}};let l="klippy";for(let e of s)if(e.endsWith(":"))l=e.slice(0,e.length-1),a.values[l]={};else{const[t,s]=e.split("=",2);(l?a.values[l]:a.values)[t]=s}return a}async function t(t){return function(t){const s=t.slice(t.lastIndexOf("===== Config file ====="),t.lastIndexOf("======================="));return{raw:t,config:s,stats:t.split("\n").filter((e=>e.startsWith("Stats "))).map(e)}}((await Promise.all(Array.from(t).map((e=>new Promise((function(t,s){const a=new FileReader;a.onload=()=>t(a.result),a.onerror=s,a.readAsText(e)})))))).join("\n"))}globalThis.postMessage({type:"ready"}),globalThis.addEventListener("message",(e=>async function(e){switch(e.type){case"log":return void console.log(globalThis,"log",e.data);case"parseFiles":return{type:"parseFiles",data:await t(e.data)};case"echo":return{type:"echo",data:e.data}}}(e.data).then((e=>e&&globalThis.postMessage(e)))))})();
//# sourceMappingURL=worker.b34481b8.js.map
